import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'

const inter = Inter({ subsets: ['latin'] })
var deviceName = 'Palm'
var bleService = 'environmental_sensing'
var bleCharacteristic = 'uv_index'
var bluetoothDeviceDetected
var gattCharacteristic

export default function Home() {

  function handleChangedValue(event) {
    // let value = event.target.value;
    let value = new TextDecoder().decode(event.target.value);
    console.log("value is: ")
    console.log(value);
  }

  function start() {
    gattCharacteristic.startNotifications()
    .then(_ => {
      console.log('Start reading...')
    })
    .catch(error => {
      console.log('[ERROR] Start: ' + error)
    })
  }
  function read() {
    return (bluetoothDeviceDetected ? Promise.resolve() : getDeviceInfo())
    .then(connectGATT)
    .then(_ => {
      console.log('Reading UV Index...')
      return gattCharacteristic.readValue()
    })
    .catch(error => {
      console.log('Waiting to start reading: ' + error)
    })
  }

  function start() {
    gattCharacteristic.startNotifications()
    .then(_ => {
      console.log('Start reading...')
    })
    .catch(error => {
      console.log('[ERROR] Start: ' + error)
    })
  }
  async function connect() {

    // const device = await navigator.bluetooth.requestDevice({ acceptAllDevices:true})
    const device = await navigator.bluetooth.requestDevice({filters: [{services: ['51ad213f-e568-4e35-84e4-67af89c79ef0']}]})
    const server = await device.gatt.connect()
    const service = await server.getPrimaryService('51ad213f-e568-4e35-84e4-67af89c79ef0')
    const char = await service.getCharacteristic('528ff74b-fdb8-444c-9c64-3dd5da4135ae')
    
    await char.addEventListener('characteristicvaluechanged', handleChangedValue)
    await char.startNotifications()
    
    
    // gattCharacteristic=char
    console.log("the name of the device is: "+device) //BluetoothDevice
    console.log('Getting server... '+server) //BluetoothRemoteGATTServer
    console.log('Getting service... '+service) //BluetoothRemoteGATTService
    console.log('Getting char... '+char) //BluetoothRemoteGATTCharacteristic
    // char.oncharacteristicvaluechanged = { onChange: handleCharacteristicValueChanged }.onChange
    // // char.addEventListener('characteristicvaluechanged', handleCharacteristicValueChanged);
    // return char.startNotifications().
    // then(() => {
    //   log('Notifications started');
    //   // Added line
    //   characteristic.addEventListener('characteristicvaluechanged',
    //       handleCharacteristicValueChanged);
    // }).catch(error => console.log(error));
    
    // console.log("the name of the device is: "+device) //BluetoothDevice
    // console.log('Getting server... '+server) //BluetoothRemoteGATTServer
    // console.log('Getting service... '+service) //BluetoothRemoteGATTService
    // console.log('Getting char... '+char) //BluetoothRemoteGATTCharacteristic
    // return char
    // console.log('Getting notify... '+notify) //BluetoothRemoteGATTCharacteristic
    // while(true){
    //   console.log(char.value)
    // }
    // const service = await server.getPrimaryService('51ad213f-e568-4e35-84e4-67af89c79ef0')
    // const char = await service.getCharacteristic('e077bdec-f18b-4944-9e9e-8b3a815162b4')
    // console.log("the name of the device is: "+device.name)
    // console.log('Getting server... '+server)
    // console.log('Getting service... '+service)
    // console.log('Getting char... '+char)
    // return char
    // .then(device => {
    //   // Human-readable name of the device.
    //   console.log("the name of the device is: "+device.name);
    
    //   // Attempts to connect to remote GATT Server.
    //   return device.gatt.connect();
    // })
    // .then(server => {
    //   const service = await server.getPrimaryService('heart_rate')
    //   const char = await service.getCharacteristic('heart_rate_measurement')
    //   console.log('Getting Service...'+server);
    //   server.serviceUuids()
    //   return server.getPrimaryService();
    // })
    
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
      <button onClick={connect}>
        pair
      </button>
      <button onClick={start}>
        start data collection
      </button>
      <button onClick={read}>
        start data collection
      </button>
        <div className={styles.description}>
          <p>
            Get started by editing&nbsp;
            <code className={styles.code}>pages/index.js</code>
          </p>
          <div>
            <a
              href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
              target="_blank"
              rel="noopener noreferrer"
            >
              By{' '}
              <Image
                src="/vercel.svg"
                alt="Vercel Logo"
                className={styles.vercelLogo}
                width={100}
                height={24}
                priority
              />
            </a>
          </div>
        </div>

        <div className={styles.center}>
          <Image
            className={styles.logo}
            src="/next.svg"
            alt="Next.js Logo"
            width={180}
            height={37}
            priority
          />
          <div className={styles.thirteen}>
            <Image
              src="/thirteen.svg"
              alt="13"
              width={40}
              height={31}
              priority
            />
          </div>
        </div>

        <div className={styles.grid}>
          <a
            href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={inter.className}>
              Docs <span>-&gt;</span>
            </h2>
            <p className={inter.className}>
              Find in-depth information about Next.js features and&nbsp;API.
            </p>
          </a>

          <a
            href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={inter.className}>
              Learn <span>-&gt;</span>
            </h2>
            <p className={inter.className}>
              Learn about Next.js in an interactive course with&nbsp;quizzes!
            </p>
          </a>

          <a
            href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={inter.className}>
              Templates <span>-&gt;</span>
            </h2>
            <p className={inter.className}>
              Discover and deploy boilerplate example Next.js&nbsp;projects.
            </p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={inter.className}>
              Deploy <span>-&gt;</span>
            </h2>
            <p className={inter.className}>
              Instantly deploy your Next.js site to a shareable URL
              with&nbsp;Vercel.
            </p>
          </a>
        </div>
      </main>
    </>
  )
}
